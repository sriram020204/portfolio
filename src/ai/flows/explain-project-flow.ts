
'use server';
/**
 * @fileOverview An AI flow to generate explanations for portfolio projects.
 *
 * - explainProject - A function that takes project details and returns an AI-generated explanation.
 * - ExplainProjectInput - The input type for the explainProject function.
 * - ExplainProjectOutput - The return type for the explainProject function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExplainProjectInputSchema = z.object({
  projectTitle: z.string().describe('The title of the project.'),
  projectDescription: z
    .array(z.string())
    .describe(
      'An array of paragraphs describing the project.'
    ),
});
export type ExplainProjectInput = z.infer<typeof ExplainProjectInputSchema>;

const ExplainProjectOutputSchema = z.object({
  explanation: z
    .string()
    .describe('The AI-generated explanation of the project.'),
});
export type ExplainProjectOutput = z.infer<typeof ExplainProjectOutputSchema>;

export async function explainProject(
  input: ExplainProjectInput
): Promise<ExplainProjectOutput> {
  return explainProjectFlow(input);
}

const projectExplainerPrompt = ai.definePrompt({
  name: 'projectExplainerPrompt',
  input: {schema: ExplainProjectInputSchema},
  output: {schema: ExplainProjectOutputSchema},
  prompt: `You are an expert technical writer and AI assistant.
Given the project title and its description (provided as an array of paragraphs), generate a concise and insightful explanation of the project.
Focus on its key objectives, the technologies potentially used (infer if not explicitly stated but logical), and its overall significance or impact.
Present the explanation as a single, coherent paragraph.

Project Title: {{{projectTitle}}}

Project Description:
{{#each projectDescription}}
- {{{this}}}
{{/each}}

Provide your explanation below:
`,
});

const explainProjectFlow = ai.defineFlow(
  {
    name: 'explainProjectFlow',
    inputSchema: ExplainProjectInputSchema,
    outputSchema: ExplainProjectOutputSchema,
  },
  async (input) => {
    // Ensure the model understands the description is an array of paragraphs.
    // The prompt handles iterating through projectDescription.
    const {output} = await projectExplainerPrompt(input);
    if (!output) {
      throw new Error('No explanation generated by AI.');
    }
    return output;
  }
);
